import argparse
import boto3
import json
import asyncio
import redis
import os
import zlib
from vt_taskc import download_malware
class downloader:

    def __init__(self,name_bucket='sorel-20m',path='config.json'):
        self.config = json.load(open(path))
        self.access_key =  self.config['access_key']
        self.secret_key = self.config['secret_key']
        self.name_bucket = name_bucket
        self.path_binaries = self.config['path_binaries']
        self.path_directory = self.config['path_data']
        self.redis_client = redis.StrictRedis(host='localhost', port=6379, db=0, decode_responses=True)
    

    def launch(self):
        while True:
           
            name_file = self.redis_client.lpop('filesdl')
            if name_file is None:
                break
            path_file = f'{self.path_directory}/{name_file}'
            
            if not os.path.exists(path_file):
                download_malware.delay(self.access_key,self.secret_key,self.name_bucket,self.path_binaries,name_file)     
            else:
                print(f'file {name_file} already exists')
        
    def load_listing(self,path='listing.txt',max=10):
        with open(path, 'r') as f:
            count = 0
            for l in f.readlines():
                path_file = f'{self.path_directory}/{l.strip()}'
                print(path_file)
                if not os.path.exists(path_file):
                    self.redis_client.rpush('filesdl',l.strip())
                    count += 1
                if count == max:
                    break
                
def parse_args():
    args = argparse.ArgumentParser()
    args.add_argument('--hash_file', dest='hash_file', help='hash file')
    args.add_argument('--dl', dest='dl',action='store_true', help='download')
    args.add_argument('--load', dest='load',action='store_true', help='load')
    args.add_argument('--path', dest='path', help='path')
    args.add_argument('--max', dest='max', help='max number of file to record',default=10)
    return args.parse_args()

if __name__ == '__main__':
    args = parse_args()
    if args.load:
        downloader().load_listing(args.path,max=args.max)
    if args.dl:
       downloader().launch() 