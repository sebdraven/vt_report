import argparse
import boto3
import json
import asyncio
import redis
import os
import zlib
from vt_taskc import download_malware,check_file_exists
class downloader:

    def __init__(self,name_bucket='sorel-20m',path='config.json'):
        self.config = json.load(open(path))
        self.access_key =  self.config['access_key']
        self.secret_key = self.config['secret_key']
        self.name_bucket = name_bucket
        self.path_binaries = self.config['path_binaries']
        self.path_directory = self.config['path_data']
        self.redis_client = redis.StrictRedis(host='localhost', port=6379, db=6, decode_responses=True)
    

    def launch(self):
        while True:
           
            key = self.redis_client.lpop('filesdl')
            if key is None:
                break
            name_file = key.split('/')[-1]
            path_file = f'{self.path_directory}/{name_file}'
            print(f'downloading {name_file}')
            print(f'key {key}')
            if not os.path.exists(path_file):
                download_malware.delay(self.access_key,self.secret_key,self.name_bucket,key,name_file)     
            else:
                print(f'file {name_file} already exists')
        
    def load_listing(self,path='listing.txt',malwaredataset='/mnt/data/soreldataset',max=10):
    
        with open(path, 'r') as f:
            count = 0
            print(f'max {max}')
            for l in f.readlines():
                key = f'{self.path_binaries}/{l.strip()}'
                if not os.path.exists(f'{malwaredataset}/{l.strip()}'):
                    self.redis_client.rpush('filesdl',key)
                    self.redis_client.incr('in_queue')
                    count += 1
                    if count == max:
                        break
                else:
                    pass
                
def parse_args():
    args = argparse.ArgumentParser()
    args.add_argument('--hash_file', dest='hash_file', help='hash file')
    args.add_argument('--dl', dest='dl',action='store_true', help='download')
    args.add_argument('--load', dest='load',action='store_true', help='load')
    args.add_argument('--path', dest='path', help='path')
    args.add_argument('--max', dest='max', help='max number of file to record',default=10)
    return args.parse_args()

if __name__ == '__main__':
    args = parse_args()
    if args.load:
        downloader().load_listing(args.path,max=args.max)
    if args.dl:
       downloader().launch() 