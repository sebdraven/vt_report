import argparse
import boto3
import json
import asyncio
import redis

class downloader:

    def __init__(self,name_bucket='sorel-20m',path='config.json'):
        self.config = json.load(open(path))
        self.access_key =  self.config['access_key']
        self.secret_key = self.config['secret_key']
        self.name_bucket = name_bucket
        self.path_binaries = self.config['path_binaries']
        self.path_direrctory = self.config['path_data']
        self.redis_client = redis.StrictRedis(host='localhost', port=6379, db=0)
    

    async def download_malware(self, s3, bucket_name, key, file_path):
        await asyncio.to_thread(s3.download_file, bucket_name, key, file_path)

    async def launch(self):
        
        # Créer une session AWS
        session = boto3.Session(
            aws_access_key_id=self.access_key,
            aws_secret_access_key=self.secret_key
        )

        # Créer un client S3
        s3 = session.client('s3')

        # Spécifier le nom du bucket S3 et le nom du fichier à télécharger
        while(1):
            hash_file = self.redis_client.lpop('filesdl')
            key = f'{self.path_binaries}/{hash_file}'

            # Télécharger le fichier
            print(key)
            await self.download_malware(s3,self.name_bucket, key, hash_file)
        
    def load_listing(self,path='listing.txt',max=100):
        with open(path, 'r') as f:
            count = 0
            for l in f.readlines():
                self.redis_client.rpush('filesdl',l.strip())
                count += 1
                if count == max:
                    break
def parse_args():
    args = argparse.ArgumentParser()
    args.add_argument('--hash_file', dest='hash_file', help='hash file')
    args.add_argument('--dl', dest='dl',action='store_true', help='download')
    args.add_argument('--load', dest='load',action='store_true', help='load')
    args.add_argument('--path', dest='path', help='path')
    return args.parse_args()

if __name__ == '__main__':
    args = parse_args()
    if args.load:
        downloader().load_listing(args.path)
    if args.dl:
        asyncio.run(downloader().launch())  